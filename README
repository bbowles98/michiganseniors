Instructions to build and run:



////////////////////////////////////////////////
File Structure For eLect Skeletal: 
michiganseniors
|
|--corda (under development)
|	voteApp - all files required to run to our cordapp on backend server
|
|--django_project
|	django_project- URL's, URL definitions
|	elect_api- model definitions, api
|
|--frontend
|	ElectionCreation/CreateElection
|	eLectUI	
|	searchAndBallot
|	searchForElections
|	signIn
/////////////////////////////////////////////////

API Guide for elect

The digital ocean server is located at 204.48.30.178.

* HOST FEATURES *

	CREATE ELECTION
		Send a POST request to 204.48.30.178/election/

		SEND
		{
			"name": "The best election ever",
			"start_date": "yyyy-MM-dd hh:mm:ss",
			"end_date": "yyyy-MM-dd hh:mm:ss"
		}
		
		RECEIVE
		{
			"election_id": int,
			"passcode": string,
			"success": "true"
		}
		
	CREATE BALLOT
		Send a POST request to 204.48.30.178/ballot/

		SEND
		{
			"election_id": int,
			"ballot_items": [{"question": “<example question>”, "choices" :[“<answer1>“, “<answer2>“, “<answer3>”]}]
		}
		
		RECEIVE
		{
			"success": "true"
		}
		
	MAKE ELECTION LIVE/DEAD MANUALLY
		Send a POST request to 204.48.30.178/live/

		SEND
		{
			"election_id": int,
			"live": "true" or "false"
		}
		
		RECEIVE
		{
			"success": "true",
			"live": boolean
		}
	
	VIEW ELECTIONS
		Send a GET request to 204.48.30.178/elections/
		
		RECEIVE
		{
			"election": [
				{
				    "passcode": string,
				    "status": boolean,
				    "election_id": int,
				    "name": string,
				    "creator": string,    
				    "start_date": "yyyy-MM-dd hh:mm:ss",
				    "end_date": "yyyy-MM-dd hh:mm:ss"
				}
			    ]
		}
		
	DELETE ELECTION
		SEND a DELETE request to 204.48.30.178/delete/
		
		SEND
		{
			"election_id": int
		}

* VOTER FEATURES *

	SEARCH FOR ELECTION
		Send a GET request to 204.48.30.178/search/
		
		SEND
		{
			"name": string
		}
		
		RECEIVE
		{
			"election": [
				{
				    "passcode": string,
				    "status": boolean,
				    "election_id": int,
				    "name": string,
				    "creator": string,
				    "start_date": "yyyy-MM-dd hh:mm:ss",
				    "end_date": "yyyy-MM-dd hh:mm:ss"
				}
			    ]
		}
		* it will return all elections whose name contains 'name'

	VIEW BALLOT
		Send a GET request to 204.48.30.178/vote/
		
		SEND
		{
			"election_id": int
		}
		
		RECEIVE
		{
			"ballot": {
				{
					question of ballot: [
						answer1,
						answer2,
						. . .
					]
				}
			}
		}

	CAST VOTE
		Send a POST request to 204.48.30.178/cast/
		
		SEND
		{
			"election_id": int,
			"candidate": string
		}
		
		RECEIVE
		{
			"success": boolean
		}
		*currently can only vote for one candidate, multiple votes will be implemented when needed

* JOINED FEATURES *

	SIGNUP
		Send a POST request to 204.48.30.178/signup/

		SEND
		{
			"username": "<username>",
			"email": "<email>",
			"password": "<password>"	
		}	
		
	VIEW RESULTS
		Send a GET request to 204.48.30.178/results/
		
		SEND
		{
			"election_id": int
		}
		
		RECEIVE
		{
			"results": {
				"live": boolean,
				"ballot": {
				    candidate: num_votes,
				    . . .
				},
				"candidates": [
					string,
					. . .
				],
				"votes": [
					int,
					. . .
				]
				"name": string,
				"total_votes": int
    			}
		}
		
	VIEW ELECTIONS REGISTERED FOR
		Send a GET request to 204.48.30.178/registeredElections/
		
		RECEIVE
		{
			"elections": [
				1, (this is the election_id of an election)
				2,
				. . .
			]
		}
		
	VIEW ELECTIONS THAT USER HAS VOTED IN
		Send a GET request to 204.48.30.178/pastElectionsVotedIn/
		
		RECEIVE
		{
			"elections": [
				1, (this is the election_id of an election)
				2,
				. . .
			]
		}
	
	CHECK IF USER HAS VOTED IN ELECTION ALREADY
		Send a GET request to 204.48.30.178/canViewResults/

		SEND
		{
			"election_id": int
		}
		
		RECEIVE
		{
			"can_view": boolean
		}
		
*  CORDA STUFF *
	
	GET http://206.81.10.10:10050/votes 
	
	RECEIVE - what is relevant to us would be: object["state"]["data"]["issue"/"selection"/"electionID"]
	[ {
	  "state" : {
	    "data" : {
	      "issue" : int,
	      "selection" : string,
	      "election" : "O=Host0, L=London, C=GB",
	      "voter" : "O=Voter, L=New York, C=US",
	      "electionID" : int,
	      "participants" : [ "O=Host0, L=London, C=GB", "O=Voter, L=New York, C=US" ]
	    },
	    DONT NEED ANYTHING HERE
	  },
	  "ref" : {
	    DONT NEED ANYTHING IN HERE
	  }
	},
	. 
	.
	.
	~N VOTES~
	. 
	. 
	. 
	} ]
	

	POST header value --> Content-type: application/x-www-form-urlencoded
	
		http://206.81.10.10:10050/put?
		issueVal=<INT>
		&selectionVal=<STRING>
		&electionVal=O=Host0,L=London,C=GB     ~ (DONT TOUCH THIS)
		&voter=O=Voter,L=NewYork,C=US	       ~ (DONT TOUCH THIS)
		&electionID=<INT>

